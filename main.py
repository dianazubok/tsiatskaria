import sqlite3
import requests
import telebot
import time
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from PIL import Image
from rapidfuzz import fuzz
from telebot.types import InputFile
from data_base import fetch_toys_by_category, get_user_data

bot = telebot.TeleBot('7923077803:AAEA0l_QzDm6YsUquLXMwIJJnesfN__5OkQ')

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ —ñ–Ω–¥–µ–∫—Å–∏
toys_by_category = {}
current_toy_index = {}
previous_message_ids = {}
search_mode = {}
user_cart = {}
user_order_data = {}
user_data = {}

ADMIN_ID = 389804772;

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def create_connection():
    connection = sqlite3.connect("toys_store.db")
    return connection

@bot.message_handler(commands=['getid'])
def send_chat_id(message):
    bot.send_message(message.chat.id, f"–í–∞—à ID: {message.chat.id}")

@bot.message_handler(commands=['start'])
def main(message):
    bot.send_message(message.chat.id, '–í—ñ—Ç–∞—î–º–æ —É —á–∞—Ç-–±–æ—Ç—ñ –º–∞–≥–∞–∑–∏–Ω—É "–¶—è—Ü—å–∫–∞—Ä–Ω—èüé†"\n\n')
    show_main_menu(message)

def show_main_menu(message):
    main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_catalog = types.KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥üìö')
    btn_search = types.KeyboardButton('–ü–æ—à—É–∫üîç')
    btn_discounts = types.KeyboardButton('–ó–Ω–∏–∂–∫–∏üí∏')
    btn_cart = types.KeyboardButton('–ö–æ—à–∏–∫üõí')
    main_markup.row(btn_catalog, btn_search, btn_discounts, btn_cart)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é‚§µÔ∏è", reply_markup=main_markup)

@bot.message_handler(func=lambda message: message.text == '–ö–∞—Ç–∞–ª–æ–≥üìö')
def show_catalog(message):
    category_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_painting = types.KeyboardButton('–ù–∞–±–æ—Ä–∏ –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏')
    btn_stickers = types.KeyboardButton('–ù–∞–ª—ñ–ø–∫–∏ —Ç–∞ —Å—Ç—ñ–∫–µ—Ä–±—É–∫–∏')
    btn_creative = types.KeyboardButton('–¢–≤–æ—Ä—á—ñ –Ω–∞–±–æ—Ä–∏')
    btn_active_games = types.KeyboardButton('–Ü–≥—Ä–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É')
    btn_back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

    category_markup.add(btn_painting, btn_creative)
    category_markup.add(btn_stickers, btn_active_games)
    category_markup.add(btn_back)

    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:", reply_markup=category_markup)

def crop_image_top_bottom(image_path, top_crop, bottom_crop):
    # –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    with Image.open(image_path) as img:
        width, height = img.size
        # –û–±—Ä—ñ–∑–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≤–µ—Ä—Ö—É —ñ –∑–Ω–∏–∑—É
        cropped_img = img.crop((0, top_crop, width, height - bottom_crop))
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–±—Ä—ñ–∑–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        cropped_img.save("cropped_image.jpg")

# –°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä—ñ–∑–∞—Ç–∏
non_croppable_toys = [13, 23, 24, 27, 28, 29, 33, 45, 46, 47, 48, 49, 50]  # –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ ID

def send_toy_image(chat_id, toy_id, is_first=False):
    connection = create_connection()
    cursor = connection.cursor()

    cursor.execute("SELECT name, description, price, photo_url FROM toys WHERE id = ?;", (toy_id,))
    toy_data = cursor.fetchone()
    connection.close()

    if toy_data:
        name, description, price, photo_url = toy_data
        response = requests.get(photo_url)

        if response.status_code == 200:
            with open("temp_image.jpg", "wb") as temp_file:
                temp_file.write(response.content)

            if toy_id not in non_croppable_toys:
                # –û–±—Ä—ñ–∑–∞—î–º–æ —Ñ–æ—Ç–æ, —è–∫—â–æ ID –Ω–µ –≤ —Å–ø–∏—Å–∫—É non_croppable_toys
                image = Image.open("temp_image.jpg")
                width, height = image.size
                cropped_image = image.crop((0, height * 0.1, width, height * 0.9))
                cropped_image = cropped_image.convert("RGB")
                cropped_image.save("temp_image.jpg")

            # –î–∞–ª—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∑ —É–∂–µ –æ–±—Ä—ñ–∑–∞–Ω–∏–º –∞–±–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º
            with open("temp_image.jpg", "rb") as temp_file:
                caption = f"<b>{name}</b>\n\n{description}\n\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω"
                inline_markup = types.InlineKeyboardMarkup()
                buttons = []
                if not is_first:
                    buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π", callback_data='previous'))
                buttons.append(types.InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∏–π‚û°Ô∏è", callback_data='next'))
                inline_markup.add(*buttons)
                inline_markup.add(types.InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞üõí", callback_data=f'add_cart_{toy_id}'))

                if chat_id in previous_message_ids:
                    try:
                        bot.delete_message(chat_id, previous_message_ids[chat_id])
                    except Exception as e:
                        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

                message = bot.send_photo(chat_id=chat_id, photo=temp_file, caption=caption, parse_mode='HTML',
                                         reply_markup=inline_markup)
                previous_message_ids[chat_id] = message.message_id


@bot.message_handler(func=lambda message: message.text in ['–ù–∞–ª—ñ–ø–∫–∏ —Ç–∞ —Å—Ç—ñ–∫–µ—Ä–±—É–∫–∏', '–¢–≤–æ—Ä—á—ñ –Ω–∞–±–æ—Ä–∏',
                                                           '–ù–∞–±–æ—Ä–∏ –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏',
                                                           '–Ü–≥—Ä–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É'])
def show_category(message):
    # –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    category = message.text
    waiting_message = bot.send_message(message.chat.id, "–ó–∞—á–µ–∫–∞–π—Ç–µ, –π–¥–µ –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤...‚è≥")
    # –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –æ–±—Ä–∞–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    toys = fetch_toys_by_category(category)
    # —Ä–æ–±–∏–º–æ –ø–∞—É–∑—É –¥–ª—è –ø–æ—à—É–∫—É
    time.sleep(2)
    bot.delete_message(message.chat.id, waiting_message.message_id)

    if toys:
        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        toys_by_category[message.chat.id] = toys
        # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        current_toy_index[message.chat.id] = 0
        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        send_toy_image(message.chat.id, toys[0][0], is_first=True)
    else:
        bot.send_message(message.chat.id, "–ù–∞ –∂–∞–ª—å, –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")



@bot.message_handler(func=lambda message: message.text == '–ü–æ—à—É–∫üîç')
def start_search(message):
    search_mode[message.chat.id] = True  # –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    markup.add(btn_back)
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: search_mode.get(message.chat.id, False))
def search_toys(message):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        search_mode[message.chat.id] = False  # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É
        show_main_menu(message)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return  # –ü—Ä–∏–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
    keyword = message.text.lower()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    connection = create_connection()
    cursor = connection.cursor()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    waiting_message = bot.send_message(message.chat.id, "–ó–∞—á–µ–∫–∞–π—Ç–µ, –π–¥–µ –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤...‚è≥")
    time.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    bot.delete_message(message.chat.id, waiting_message.message_id)

    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —ñ–º–µ–Ω —ñ –æ–ø–∏—Å—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –±–∞–∑–∏
        cursor.execute("SELECT id, name, description FROM toys")
        toys = cursor.fetchall()
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        return
    finally:
        connection.close()

    # –ü–æ—à—É–∫ –∑–∞ –ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—é
    # —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É

    results = []

    # —ñ—Ç–µ—Ä—É—î–º–æ—Å—è –ø–æ —Å–ø–∏—Å–∫—É —ñ–≥—Ä–∞—à–æ–∫
    for toy in toys:
        # –æ–±—á–∏—Å–ª—é—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å –∑–∞ –Ω–∞–∑–≤–æ—é
        name_similarity = fuzz.partial_ratio(keyword, toy[1].lower())
        # –æ–±—á–∏—Å–ª—é—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å –∑–∞ –æ–ø–∏—Å–æ–º
        description_similarity = fuzz.partial_ratio(keyword, toy[2].lower())

        # —è–∫—â–æ —Å—Ö–æ–∂—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥, –¥–æ–¥–∞—î–º–æ —ñ–≥—Ä–∞—à–∫—É –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if name_similarity > 70 or description_similarity > 70:
            results.append(toy)

    # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    if results:
        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏
        toys_by_category[message.chat.id] = results
        # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        current_toy_index[message.chat.id] = 0

        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
        send_toy_image(message.chat.id, results[0][0], is_first=True)
    else:
        bot.send_message(message.chat.id, f"–ù–∞ –∂–∞–ª—å, –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{keyword}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    search_mode[message.chat.id] = False
    show_main_menu(message)

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    show_main_menu(message)

def cancel_search(message):
    if search_mode.get(message.chat.id):
        search_mode[message.chat.id] = False  # –í–∏–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
        bot.send_message(message.chat.id, "–ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ‚ùå")
        show_main_menu(message)


@bot.message_handler(func=lambda message: message.text == '–ó–Ω–∏–∂–∫–∏üí∏')
def discounts(message):
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–Ω–∏–∂–∫—É
    markup = types.InlineKeyboardMarkup()
    btn_contact = types.InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_admin')
    markup.add(btn_contact)
    bot.send_message(
        message.chat.id,
        "–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ *–∑–Ω–∏–∂–∫—É -10%* –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–∏—Öüí∏ \n\n–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚§µÔ∏è:", parse_mode="Markdown",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'contact_admin')
def contact_admin(call):
    user_nickname = call.from_user.username if call.from_user.username else "–ë–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É"
    user_link = f'<a href="tg://user?id={call.from_user.id}">{user_nickname}</a>' if call.from_user.username else f"<a href='tg://user?id={call.from_user.id}'>{call.from_user.first_name}</a>"

    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        bot.send_message(
            ADMIN_ID,
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_link} —Ö–æ—á–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∑–Ω–∏–∂–∫–æ—é.\n–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∏–º, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            parse_mode="HTML"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML –∑–∞–º—ñ—Å—Ç—å Markdown
        )
        sent_message = bot.answer_callback_query(call.id, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç —ñ –≤ –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏!")
        time.sleep(3)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥–∏
        bot.delete_message(call.message.chat.id, sent_message.message_id)

    except Exception as e:
        print(f"Error while sending message to admin: {e}")
        bot.answer_callback_query(call.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@bot.callback_query_handler(func=lambda call: call.data in ['previous', 'next'])
def navigate_toys_callback(call):
    if call.message.chat.id in toys_by_category:
        toys = toys_by_category[call.message.chat.id]
        index = current_toy_index[call.message.chat.id]

        if call.data == 'next':
            index += 1
            if index >= len(toys):  # –Ø–∫—â–æ –¥–æ—Å—è–≥–ª–∏ –∫—ñ–Ω—Ü—è —Å–ø–∏—Å–∫—É
                index = 0  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
        elif call.data == 'previous':
            index -= 1
            if index < 0:  # –Ø–∫—â–æ –¥–æ—Å—è–≥–ª–∏ –ø–æ—á–∞—Ç–∫—É —Å–ø–∏—Å–∫—É
                index = len(toys) - 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É

        current_toy_index[call.message.chat.id] = index  # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å
        send_toy_image(call.message.chat.id, toys[index][0])  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–æ–≤–∞—Ä

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ –∫–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
    bot.answer_callback_query(call.id)


# –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞"
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_cart_'))
def add_to_cart_callback(call):
    # –æ—Ç—Ä–∏–º—É—î–º–æ id —Ç–æ–≤–∞—Ä—É –∑ callback data
    toy_id = int(call.data.split('_')[2])
    # –æ—Ç—Ä–∏–º—É—î–º–æ id —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    chat_id = call.message.chat.id

    # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—à–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id not in user_cart:
        user_cart[chat_id] = []

    # –¥–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if toy_id not in user_cart[chat_id]:
        user_cart[chat_id].append(toy_id)
        bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")
    else:
        bot.send_message(chat_id, "–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –≤ –∫–æ—à–∏–∫—É!")



@bot.message_handler(func=lambda message: message.text == '–ö–æ—à–∏–∫üõí')
def show_cart(message):
    chat_id = message.chat.id
    if chat_id not in user_cart or not user_cart[chat_id]:
        bot.send_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return

    cart_items = user_cart[chat_id]
    response = "–í–∞—à –∫–æ—à–∏–∫:\n\n"
    total_price = 0

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç
    connection = create_connection()
    cursor = connection.cursor()
    cursor.execute("SELECT id, name, price FROM toys WHERE id IN ({})".format(','.join(['?'] * len(cart_items))),
                   cart_items)
    toys_data = cursor.fetchall()
    connection.close()

    for toy_data in toys_data:
        item_id, name, price = toy_data
        name = name.replace("\n", " ")  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤ —Ä—è–¥–∫—ñ–≤
        response += f"‚úÖ {name} - {price} –≥—Ä–Ω\n"
        total_price += price

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(f"–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ({total_price} –≥—Ä–Ω)", callback_data='checkout'))
    inline_markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫‚ùå", callback_data="clear_cart"))

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ—à–∏–∫–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–æ—é
    bot.send_message(chat_id, response, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'clear_cart')
def clear_cart_handler(call):
    chat_id = call.message.chat.id
    user_cart[chat_id] = []  # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
    bot.send_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
    show_cart(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'checkout')
def checkout_handler(call):
    chat_id = call.message.chat.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
    user_data = get_user_data(chat_id)
    if user_data:
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        name, phone, city, warehouse = user_data
        user_order_data[chat_id] = {
            "name": name,
            "phone": phone,
            "city": city,
            "warehouse": warehouse
        }
        confirm_message = (f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n"
                           f"–ü–Ü–ë: {name}\n"
                           f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                           f"–ú—ñ—Å—Ç–æ: {city}\n"
                           f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {warehouse}\n\n"
                           f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–∏ –∑–º—ñ–Ω–∏—Ç–∏?")

        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –∑–º—ñ–Ω–∏
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data='confirm_user_data'))
        inline_markup.add(types.InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ ‚úèÔ∏è", callback_data='edit_user_data'))
        bot.send_message(chat_id, confirm_message, reply_markup=inline_markup)
    else:
        # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏üõç")
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë:")
        bot.register_next_step_handler(message=call.message, callback=process_name)


def process_name(message):
    chat_id = message.chat.id
    if chat_id not in user_order_data:
        user_order_data[chat_id] = {}

    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ü–Ü–ë
    user_order_data[chat_id]["name"] = message.text

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    contact_button = KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç üì±", request_contact=True)
    markup.add(contact_button)

    bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É‚§µÔ∏è", reply_markup=markup)
    bot.register_next_step_handler(message=message, callback=process_phone)


def process_phone(message):
    chat_id = message.chat.id
    if message.contact:
        user_order_data[chat_id]["phone"] = message.contact.phone_number
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:")
        bot.register_next_step_handler(message=message, callback=process_city)
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")
        process_name(message)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É


def process_city(message):
    chat_id = message.chat.id
    user_order_data[chat_id]["city"] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:")
    bot.register_next_step_handler(message=message, callback=process_warehouse)


def process_warehouse(message):
    chat_id = message.chat.id
    user_order_data[chat_id]["warehouse"] = message.text

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_summary = f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    total_price = 0

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ —É –∫–æ—à–∏–∫—É
    for item_id in user_cart.get(chat_id, []):
        try:
            connection = create_connection()
            cursor = connection.cursor()
            cursor.execute("SELECT name, price FROM toys WHERE id = ?", (item_id,))
            toy_data = cursor.fetchone()
            connection.close()

            if toy_data:
                name, price = toy_data
                name = name.replace("\n", " ")  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤ —Ä—è–¥–∫—ñ–≤
                order_summary += f"‚úÖ {name} - {price} –≥—Ä–Ω\n"
                total_price += price
        except Exception as e:
            bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–æ–≤–∞—Ä—É: {e}")
            continue

    if total_price == 0:
        order_summary += "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ—à–∏–∫–∞."
    else:
        order_summary += f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} –≥—Ä–Ω\n\n"

    order_summary += f"–ü–Ü–ë: {user_order_data[chat_id]['name']}\n"
    order_summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_order_data[chat_id]['phone']}\n"
    order_summary += f"–ú—ñ—Å—Ç–æ: {user_order_data[chat_id]['city']}\n"
    order_summary += f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {user_order_data[chat_id]['warehouse']}\n"

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚úÖ", callback_data='confirm_order'))
    inline_markup.add(types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data='cancel_order'))

    bot.send_message(chat_id, order_summary, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_user_data')
def confirm_user_data_handler(call):
    chat_id = call.message.chat.id

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.send_message(chat_id, "–í–∞—à—ñ –¥–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ ‚úÖ")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    confirm_order_handler(call)


@bot.callback_query_handler(func=lambda call: call.data == 'edit_user_data')
def edit_user_data_handler(call):
    chat_id = call.message.chat.id

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ
    bot.send_message(chat_id, "–î–∞–≤–∞–π—Ç–µ –æ–Ω–æ–≤–∏–º–æ –≤–∞—à—ñ –¥–∞–Ω—ñ üõ†Ô∏è")
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_name)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_order')
def confirm_order_handler(call):
    chat_id = call.message.chat.id

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    order_summary = f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    total_price = 0

    for item_id in user_cart[chat_id]:
        connection = create_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT name, price FROM toys WHERE id = ?", (item_id,))
        toy_data = cursor.fetchone()
        connection.close()

        if toy_data:
            name, price = toy_data
            name = name.replace("\n", " ")
            order_summary += f"‚úÖ {name} - {price} –≥—Ä–Ω\n"
            total_price += price

    order_summary += f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} –≥—Ä–Ω\n\n"
    order_summary += f"–ü–Ü–ë: {user_order_data[chat_id]['name']}\n"
    order_summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_order_data[chat_id]['phone']}\n"
    order_summary += f"–ú—ñ—Å—Ç–æ: {user_order_data[chat_id]['city']}\n"
    order_summary += f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏: {user_order_data[chat_id]['warehouse']}\n"

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.send_message(chat_id, "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ‚úÖ\n\n–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π\n–î—è–∫—É—î–º–æ‚ù§Ô∏è")

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(ADMIN_ID, order_summary)

    # –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    user_cart[chat_id] = []

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    show_main_menu(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_order')
def cancel_order_handler(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ‚ùå\n–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏")
    # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    user_order_data.pop(chat_id, None)
    bot.delete_message(chat_id, call.message.message_id)
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    show_main_menu(call.message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)

